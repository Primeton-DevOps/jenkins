##
## pipeline job velocity templates
##
## velocity code
#if ( !${job.keepDependencies} )
#set( ${job.keepDependencies} = "false" )
#end
##
## Discard Old Builds
##
#if ( ! ${job.discardOldBuilds} )
#set( ${job.discardOldBuilds} = "false" )
#end
##
#if ( ! ${job.daysToKeep} )
#set ( ${job.daysToKeep} = "-1" )
#end
##
#if ( ! ${job.numToKeep} )
#set ( ${job.numToKeep} = "-1" )
#end
##
#if ( ! ${job.artifactDaysToKeep} )
#set ( ${job.artifactDaysToKeep} = "-1" )
#end
##
#if ( ! ${job.artifactNumToKeep} )
#set ( ${job.artifactNumToKeep} = "-1" )
#end
##
## Job Parameters Definition
##
#if ( ! ${job.parametersDefinition} )
#set ( ${job.parametersDefinition} = "false" )
#end
##
## Build Triggers
##
#if ( ! ${job.buildTriggers} )
#set ( ${job.buildTriggers} = "false" )
#end
##
## Pipeline Code
##
#if ( ! ${pipeline.sandbox} )
#set ( ${pipeline.sandbox} = "true" )
#end
##
##
## job configuration file content
##
<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.9">
  <actions/>
##
## General
##
  <description>${job.description}</description>
  <keepDependencies>${job.keepDependencies}</keepDependencies>
  <properties>
    <!--
    <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@0.0.17">
      <uid></uid>
      <namespace></namespace>
      <name></name>
      <resourceVersion></resourceVersion>
    </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
    -->
##
## Discard old builds
##
#if ( ${job.discardOldBuilds} && "true" == ${job.discardOldBuilds} )
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>${job.daysToKeep}</daysToKeep>
        <numToKeep>${job.numToKeep}</numToKeep>
        <artifactDaysToKeep>${job.artifactDaysToKeep}</artifactDaysToKeep>
        <artifactNumToKeep>${job.artifactNumToKeep}</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
#end
##
## ParametersDefinitionProperty
##
#if ( ${job.parametersDefinition} && "true" == ${job.parametersDefinition} )
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
#foreach ( $param in ${job.parameters} )
#set ( $paramConfig = ${parseTool.merge("classpath:/templates/job/parameter/${param.type}.vm", ${param})} )        
${paramConfig}
#end
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
#end
##
## Build Triggers
##
#if ( ${job.buildTriggers} && "true" == ${job.buildTriggers} )
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
#foreach ( $trigger in ${job.triggers} )
#set ( $triggerConfig = ${parseTool.merge("classpath:/templates/job/trigger/${trigger.type}.vm", ${trigger})} )
${triggerConfig}
#end
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
#end
  </properties>
##
## Pipeline Job
##
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>'''${pipeline.script}'''</script>
    <sandbox>${pipeline.sandbox}</sandbox>
  </definition>
  <triggers/>
</flow-definition>